#!/usr/bin/env perl
#
# Fetches files <url>/<name> for each <name> listed in <url>/SHA256.
#
# Usage:
#   shamir [-c|-l] [-B] [-E <expr>] [-C <dstdir>] <url>
#
# Use case:           mirror firmware.openbsd.org (with -B, --base64)
#                     mirror OpenBSD releases (without -B)
# Target platform:    OpenBSD 6.x + rsync
#                     Debian 10.x + curl, rsync
# Portability issues: uses ftp(1) to download files
#                     on other platforms, curl(1) may be used as alternative
#
# ---
# Performs the following actions, in order:
#   (a) change working directory to <dstdir> if given
#   (b) download <url>/SHA256 to ./SHA256.new
#   (c) read filenames + checksums from ./SHA256.new
#   (d) for each filename, check whether it exists and its checksums matches
#          when file missing => queue for download
#          when chk mismatch => queue for download (probably updated)
#          when not a file   => warn, continue
#   (e) download files to ./<name>.new
#   (f) rollover files
#       - rm ./SHA256
#       - foreach file <name>: mv ./<name>.new ./<name>
#       - mv ./SHA256.new ./SHA256
#
# Existing <name>.new files will be deleted.
#
package SHAMIR;

use strict;
use warnings;
use feature qw( say );

use Digest::SHA;
use Getopt::Long qw(:config posix_default bundling permute );
use File::Basename qw( basename );

our $VERSION = '0.2';
our $NAME    = 'shamir';

my $prog_name   = basename($0);
my $short_usage = "${prog_name} [-c|-l] [-B] [-E <expr>] [-C <dstdir>] <url>";

sub main_get_opts {
    my $opts = shift;

    my @options_def = (
        'help|h',
        'dstdir|C=s',
        'check|c',
        'list|l',
        'expr|E=s',
        'base64|B',
    );

    return GetOptions($opts, @options_def);
}


sub main_print_help {
    my $out = shift // *STDOUT;
    printf {$out} "Usage: %s\n", $short_usage;
}


# @autodie str f_suffix ( str suffix, str name )
#    f_suffix (suffix, name) -> (name + suffix)
#
#   Concatenates two non-empty strings.
#
sub f_suffix {
    my $suffix = shift or die;
    my $name = shift or die;
    return ($name . $suffix);
}


# @autodie str f_new ( str name )
#   IS f_suffix ( '.new', name )
sub f_new { return f_suffix ( '.new', @_ ); }


# @autodie str f_old ( str name )
#   IS f_suffix ( '.old', name )
sub f_old { return f_suffix ( '.old', @_ ); }


# @autodie int unlink ( str filepath )
#
#   Deletes a file if it exists.
#   Dies if the file still exists after calling this function.
#
sub rmfile {
    my $filepath = shift;
    unlink $filepath or (! $!{EEXIST}) or die "Failed to remove ${filepath}!\n";
}


# @autodie dict get_file_map ( str sha_file )
#
#   Reads the given SHA256 file and returns a filename -> SHA256 checksum mapping.
#
sub get_file_map {
    my $sha_file = shift or die;

    my $fmap = {};

    open my $fh, '<', $sha_file or die "Failed to open ${sha_file}: $!";
    while ( <$fh> ) {
        if ( m/^\s*(SHA256)\s+\(([^\)]+)\)\s*=\s*(\S+)\s*$/sx ) {
            # ignore chk_type $1 for now
            $fmap->{$2} = $3;

        } else {
            warn "unmatched: ${_}\n";
        }
    }
    close $fh or warn;

    return $fmap;
}

# str get_file_sha256 ( str filepath, bool base64_mode )
#
#    Calculates and returns the SHA256 checksum for the given file.
#
sub get_file_sha256 {
    my $filepath = shift or die "No file path?";
    my $base64_mode = shift;
    my $shasum;

    my $hashobj = Digest::SHA->new ( 'sha256' );

    $hashobj->addfile ( $filepath ) or die "Failed to hash file ${filepath}: $!";

    if ( $base64_mode ) {
        $shasum = $hashobj->b64digest or die "Failed to get SHA256 hash";

        # emulate sha256(1) behavior, append '='
        #   https://perldoc.perl.org/Digest/SHA.html#PADDING-OF-BASE64-DIGESTS
        while ( (length $shasum) % 4 ) { $shasum .= '='; }

    } else {
        # hex mode
        $shasum = $hashobj->hexdigest;
    }

    return $shasum;
}


# autodie int rotfile ( [str src], str dst )
#
#    Replaces the file dst with the file src by renaming it.
#    If src is omitted, then dst + '.new' is used as src.
#
#    Any existing dst will be removed to prior to rotating the file.
#
sub rotfile {
    my $src;
    my $dst;

    if ( scalar @_ == 2 ) {
        $src = shift or die;
        $dst = shift or die;

    } elsif ( scalar @_ == 1 ) {
        $dst = shift or die;
        $src = f_new($dst);

    } else {
        die "usage error.";
    }

    rmfile ( $dst );
    rename $src, $dst or die "Failed to replace ${dst}";
}


my $opts = {};

if ( ! main_get_opts ( $opts ) ) {
    main_print_help(*STDERR);
    die "Bad usage.";

} elsif ( $opts->{help} ) {
    main_print_help();
    exit 0;
}

my $base64_mode = $opts->{'base64'};


# str base_url from @ARGV
#   Will be used to construct all download URLS, in particular
#      - the SHA256 file+checksum list (base_url + '/SHA256')
#      - files to be downloaded, after reading the SHA256 file (base_url + <name>)
#
my $base_url = shift @ARGV or die "Missing base URL";

if ( scalar @ARGV ) { die "Too many positional arguments."; }

# @FEATURE_CREEP dstdir
#   If given, change working directory to this path.
if ( $opts->{dstdir} ) {
    chdir $opts->{dstdir}
        or die ("Failed to enter directory " .$opts->{dstdir} . " .\n");
}


# create the filename to sha256 checksum mapping
#  download the /SHA256 file
my $sha_url = ($base_url . '/SHA256');
my $sha_file = './SHA256';

rmfile ( f_new($sha_file) );
FetchFile::fetch ( f_new($sha_file), $sha_url ) or die "Failed to fetch SHA256";

#  read it and create the mapping
my $file_map = get_file_map ( f_new($sha_file) ) or die "Failed to compute file map";

# --expr: drop files not matching the given regexp
if ( $opts->{expr} ) {
    my $expr = qr/$opts->{expr}/mx;

    my $file_map_redux = {};

    foreach my $fname ( keys %$file_map ) {
        if ( $fname =~ $expr ) {
            $file_map_redux->{$fname} = $file_map->{$fname};
        }
    }

    $file_map = $file_map_redux;
}

# --list mode: print file names and exit
if ( $opts->{list} ) {
    foreach my $fname ( sort keys %$file_map ) {
        say {*STDOUT} $fname;
    }

    rmfile ( f_new($sha_file) );
    exit 0;
}

# determine which files need to be downloaded
#    FOR EACH filename, remote checksum:
#        skip non-files including symlinks
#
#        IF filename exists THEN
#            get current checksum for filename
#            IF current != remote checksum THEN
#                queue filename for download
#            END IF
#        ELSE
#            queue new filename for download
#        END IF
#    END FOR EACH
#
my @files_to_fetch;
foreach my $fname ( sort keys %$file_map ) {
    my $want_chk = $file_map->{$fname};

    if ( -l $fname ) {
        warn "Skipping symlink: ${fname}\n";

    } elsif ( -f $fname ) {
        my $have_chk = get_file_sha256 ( $fname, $base64_mode )
            or die "Failed to get SHA256 for file ${fname}";

        if ( $want_chk ne $have_chk ) {
            push @files_to_fetch, $fname;
        }

    } elsif ( -e $fname ) {
        warn "Skipping non-file ${fname}\n";

    } else {
        push @files_to_fetch, $fname;
    }
}


# --check report status and exit
if ( $opts->{check} ) {
    my $ftf_map = {};
    foreach my $fname ( @files_to_fetch ) { $ftf_map->{$fname} = 1; }

    foreach my $fname ( sort keys %$file_map ) {
        my $status_desc;

        if ( exists $ftf_map->{$fname} ) {
            $status_desc = "fetch";
        } else {
            $status_desc = "keep";
        }

        printf {*STDOUT} "%s %s\n", $status_desc, $fname;
    }

    rmfile ( f_new($sha_file) );
    exit ( ( scalar @files_to_fetch ) ? 1 : 0 );
}



# bail out with success exit code if nothing (new) to download
if ( not scalar @files_to_fetch ) {
    printf {*STDOUT} "All files are up-to-date.\n";
    rmfile ( f_new($sha_file) );
    exit 0;
}



# download files, recheck checksum
foreach my $fname ( @files_to_fetch ) {
    my $want_chk = $file_map->{$fname};
    my $file_url = ($base_url . '/' . $fname);
    my $dst = f_new($fname);

    printf {*STDOUT} "Downloading: %s\n", $fname;
    rmfile ( $dst );
    FetchFile::fetch ( $dst, $file_url ) or die "Failed to fetch ${fname}";

    my $have_chk = get_file_sha256 ( $dst, $base64_mode )
        or die "Failed to get SHA256 for file ${dst}";

    # remote sent us garbage or bitrot (EAGAIN) or MITM --> stop
    if ( $want_chk ne $have_chk ) {
        die "SHA256 mismatch after download: ${fname} from ${file_url}";
    }
}

# put files into place
#   CRITICAL section, non-atomic
#   If a client downloads the SHA256 file now,
#   it will expect the old checksums while we're replacing the content.
#
#   Possible remedies:
#     (a) use staging directory and move that to DST (one mv instead of many)
#     (b) remove existing SHA256 file now,
#         signalizing that no checksums are available atm
#           this could leave the script in an unclean state
#           nevertheless, choose option (b) for now.
#
printf {*STDOUT} "Rotating files\n";

# move (soon-to-be) old SHA256 file away
#  This file will not exist on the initial run.
if ( -e $sha_file ) {
    rotfile ( $sha_file, f_old($sha_file) );
}

# rotate downloaded files
foreach my $fname ( @files_to_fetch ) { rotfile ( $fname ); }

# rotate new SHA256 file
#  This file will always exist since it has been downloaded by this script
#  and has already been used to determine the list of files to fetch.
rotfile ( $sha_file );

exit 0;



package FetchFile;

use strict;
use warnings;

our $IMPL;
our $f_fetch;

sub init {
    if ( system ( 'ftp -MVo - -S dont file:///dev/null 1>/dev/null 2>/dev/null' ) == 0 ) {
        $IMPL    = 'openbsd-ftp';
        $f_fetch = \&openbsd_ftp_get_file;
        return 1;

    } elsif ( system ( 'curl --version 1>/dev/null 2>/dev/null' ) == 0 ) {
        $IMPL    = 'curl';
        $f_fetch = \&curl_get_file;
        return 1;

    } else {
        return 0;
    }
}


sub fetch {
    if ( not defined $f_fetch ) {
        init() or die "Failed to find a suitable download program.";
    }

    return &{ $f_fetch } ( @_ );
}


sub openbsd_ftp_get_cmdv {
    my $outfile = shift;
    my $url = shift;

    my @cmdv = ('ftp', '-MnV');

    push @cmdv, '-w', '45';

    if ( defined $outfile ) {
        push @cmdv, '-o', $outfile;
    } else {
        push @cmdv, '-o', '-';
    }

    push @cmdv, $url;

    return \@cmdv;
}

sub openbsd_ftp_get_file {
    my $cmdv = openbsd_ftp_get_cmdv ( @_ );

    return ( system ( @$cmdv ) == 0 );
}


sub curl_get_cmdv {
    my $outfile = shift;
    my $url = shift;

    my @cmdv = ('curl', '--silent', '--fail', '--location');

    push @cmdv, '--max-time', '45';

    if ( defined $outfile ) {
        push @cmdv, '-o', $outfile;
    }

    push @cmdv, $url;

    return \@cmdv;
}


sub curl_get_file {
    my $cmdv = curl_get_cmdv ( @_ );

    return ( system ( @$cmdv ) == 0 );
}

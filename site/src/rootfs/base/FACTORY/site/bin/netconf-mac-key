#!/usr/bin/env perl
#
# Constructs a netconfig-by-mac DNS lookup key.
#
# Usage:
#   netconf-mac-key [-m <method>] [-t <truncate>] [-d <domain>] <mac>
#
# With the --domain, -d option, create a fqdn lookup key.
# The domain will not be validated, except for the length of the key.
# Without it, create a lookup key label for DNS zone files.
#
# Use case:           bootstrap network configuration
#                     using own MAC address + DNS lookups
#
# Target platform:    OpenBSD 6.x, fresh install - perl with core libs
#
package NetConfigMacKeyMain;

use strict;
use warnings;
use feature qw( say );

use Digest::SHA;
use Getopt::Long qw(:config posix_default bundling permute );
use File::Basename qw( basename );

use constant MAX_LABEL_LENGTH => 63;
use constant MAX_FQDN_LENGTH  => 254;  # including root label '.'
use constant DEFAULT_METHOD   => 'sha224';

our $VERSION = '0.1';
our $NAME    = 'netconf-mac-key';

our $METHOD_MAP = {
	'as-is'   => \&hashfunc_ident,
	'sha1'    => \&hashfunc_sha,
	'sha224'  => \&hashfunc_sha,
	'sha256'  => \&hashfunc_sha,
	'sha512'  => \&hashfunc_sha,
};


my $prog_name   = basename($0);
my $short_usage = "${prog_name} [-m <method>] [-t <truncate>] [-d <domain>] <mac>";


sub main_get_opts {
	my $opts = shift;

	my @options_def = (
		'help|h',
		'method|m=s',
		'truncate|t=i',
		'domain|d=s',
	);

	return GetOptions($opts, @options_def);
}


sub main_print_help {
	my $out = shift // *STDOUT;
	printf {$out} "Usage: %s\n", $short_usage;
}


sub main {
	my $arg;
	my $mac;
	my $key;
	my $keyfunc;
	my $res;

	# parse options
	my $opts = {};

	if ( ! main_get_opts ( $opts ) ) {
		main_print_help(*STDERR);
		die "Bad usage.\n";

	} elsif ( $opts->{help} ) {
		main_print_help();
		exit 0;
	}

	# get MAC address from @ARGV and normalize it
	$arg = (shift @ARGV) or die "Missing MAC address\n";
	$mac = normalize_mac ( $arg ) or die "Invalid MAC address: ${arg}.\n";

	if ( scalar @ARGV ) { die "Too many positional arguments.\n"; }

	# obfuscate MAC address
	$arg = $opts->{'method'} // DEFAULT_METHOD;
	$keyfunc = $METHOD_MAP->{$arg} or die "Unknown method ${arg}.\n";

	$key = &$keyfunc ( $arg, $mac ) or die "Failed to convert MAC to key.\n";

	# truncate result
	$arg = $opts->{'truncate'} // MAX_LABEL_LENGTH;
    if ( ! $arg ) {
        # zero-ish, no truncate
        ;
    } elsif ( ($arg < 0) || ($arg > MAX_LABEL_LENGTH) ) {
		die "Invalid truncation length: ${arg}.\n";
	} elsif ( length $key > $arg ) {
		$key = substr $key, 0, $arg or die "Failed to truncate key.\n";
	}

	# set output string
	$res = $key;

	# construct fully qualified lookup key if domain given
	$arg = $opts->{'domain'};
	if ( $arg ) {
		$arg =~ s/[.]+/./sxg;
		$arg =~ s/^[.]//sx;
		$arg =~ s/[.]$//sx;

		if ( $arg ) {
			$res = sprintf '%s.%s.', $key, $arg;
		} else {
			$res = sprintf '%s.', $key;
		}

		if ( length $res > MAX_FQDN_LENGTH ) {
			die "Resulting lookup key exceeds maximum domain length!\n";
		}
	}

	# done - print output string
	say {*STDOUT} $res;
}


# str normalize_mac ( str mac )
#
#    Normalizes a MAC address by converting it to lowercase
#    and replacing ':' with '-'.
#
#    Returns undef if the given MAC address was not valid.
#
sub normalize_mac {
	my $arg = shift or return;

	$arg = lc $arg;
	$arg =~ s/[:]/-/sxg;

	if ( $arg =~ m/^[0-9a-f]{2}(?:\-[0-9a-f]{2}){5}$/sx ) {
		return $arg;
	} else {
		return;
	}
}


# str hashfunc_ident ( str alg, str data ) -> data
sub hashfunc_ident {
	my $alg = shift;
	my $data = shift or return;

	return $data;
}


# str hashfunc_sha ( str alg, str data )
#  IS _hashfunc_generic_digest ( Digest<<alg>>, str data )
sub hashfunc_sha {
	my $alg = shift or return;
	_hashfunc_generic_digest ( Digest::SHA->new ( $alg ), @_ );
}


# str _hashfunc_generic_digest ( Digest hashobj, str data )
sub _hashfunc_generic_digest {
	my $hashobj = shift or return;
	my $data = shift or return;

	$hashobj->add ( $data );

	return $hashobj->hexdigest;
}


main();
exit 0;

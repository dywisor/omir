#!/usr/bin/env perl
#
# Constructs a netconfig-by-mac DNS lookup key.
#
# Usage:
#   netconf-mac-key [-m <method>] [-t <truncate>] [-d <domain>] <mac>
#
# With the --domain, -d option, create a fqdn lookup key.
# The domain will not be validated, except for the length of the key.
# Without it, create a lookup key label for DNS zone files.
#
# Use case:           bootstrap network configuration
#                     using own MAC address + DNS lookups
#
# Target platform:    OpenBSD 6.x, fresh install - perl with core libs
#
package WaitforReorderKernel::Main;

use strict;
use warnings;
use feature qw( say );

use POSIX ();
use Getopt::Long qw(:config posix_default bundling );
use File::Basename qw( basename );

our $VERSION = '0.1';
our $NAME    = 'waitfor_reorder_kernel';

my $prog_name   = basename($0);
my $short_usage = "${prog_name} [-C <dir>] [-d] [-t <seconds>] [-s <seconds>] cmd [arg...]";


sub main_get_opts {
	my $opts = shift;

	my @options_def = (
		'help|h',
        'chdir|C=s',
        'detach|d',
        'sleep|s=i',
        'timeout|t=i',
    );

	return GetOptions($opts, @options_def);
}


sub main_print_help {
	my $out = shift // *STDOUT;
	printf {$out} "Usage: %s\n", $short_usage;
}


sub main {
	# parse options
	my $opts = {};

	if ( ! main_get_opts ( $opts ) ) {
		main_print_help(*STDERR);
		die "Bad usage.\n";

	} elsif ( $opts->{help} ) {
		main_print_help();
		exit 0;

    } elsif ( ! scalar @ARGV ) {
        die "no command given.\n";

	} else {
        main_wait ( $opts, \@ARGV );
        die "logical error.\n";
    }
}


sub main_wait {
    my $opts = shift;
    my $cmdv = shift;

    my $pid = fork;
    if ( $pid < 0 ) {
        exit 1;

    } elsif ( $pid > 0 ) {
        exit 0;

    } else {
        my $delay       = 0 + ($opts->{'timeout'} // 600);
        my $tick        = 0 + ($opts->{'tickrate'} || 2);
        my $sleep_time  = 0 + ($opts->{'sleep'} // 15);
        my $waited      = 0;
        my $devnull     = '/dev/null';
        my @check_kernel_relink_cmdv = ( 'pgrep', '-qxf', '/bin/ksh.*reorder_kernel' );

        POSIX::setsid or warn;

        if ( $opts->{'chdir'} ) {
            chdir $opts->{'chdir'} or warn;
        }

        close STDIN;
        open STDIN, '<', $devnull;

        if ( $opts->{'detach'} ) {
            close STDOUT;
            open STDOUT, '>>', $devnull;

            close STDERR;
            open STDERR, '>&STDOUT';
        }

        while ( ( $waited < $delay ) && ( system ( @check_kernel_relink_cmdv ) == 0 ) ) {
            sleep $tick;
            $waited += $tick;
        }

        if ( $sleep_time ) {
            sleep $sleep_time;
        }

        exec @$cmdv;
        die "failed to exec.\n";
    }
}

main();
exit 0;
